#1 tính tổng 1 : n+s(n-1) -> 1+2+3+4+ .. + n ví dụ nhập 5 : khi nào s(0) bằng 0 thì tính tổng  111 
#2 tính tổng 2 : n*n+s(n-1) -> 1^2 + 2^2 + 3^2 +4^2 +. + n^2 
#3  ((n%2==0)?n:-n) nếu n chẵn thì ta cộng n lẻ thì ta trừ rồi dùng + s(n-1) 
#4 độ phức tạp của thuật toán : có 5 kiểu : O(1) -> O(logN) -> O(sqrt(n)) -> O(n) -> O(n^2),O(2^n) => chạy nhanh nhất là O(1) và chậm nhất là O(n^2),O(2^n) 
  + O(1): + , - , * , / % , cin , cout đều gọi là O(1) 
  + O(n): 1+2+3+4+ .. + n nếu dùng công thức n* (n + 1)/2 thì nó sẽ trở thành O(1)   
  + O(sqrt(n)) : có căn n 
int result = sqrt(n) + log(n) + n; -> Không có vòng lặp, chỉ tính toán một lần : O(1) 
for (int i = 1; i <= n; i++) {
    int x = sqrt(i);  // Có căn bậc hai, nhưng vòng lặp vẫn chạy O(n)  
}    
Vòng lặp chạy từ 1 -> n nên vẫn là O(1) 
=> Quy tắc quan trọng: Chỉ lấy bậc lớn nhất, bỏ các hệ số nhỏ. vd: O(3^2+5n+4) -> độ phức tạp là O(n^2) 
Hai vòng lặp lồng nhau -> O(n^2) , nếu hai vòng lặp nhân nhau thì O(2^n) 
#5 Tính tổ hợp chập K của N : n!/k!*(n-k)! 
ll s(ll n, int k){
  if(k==0||k==n) return 1;
  else {
    return s(n-1,k-1) +s(n-1,k);
  }
}
#6 GCD : if(a%b==0) return b; else return gcd(b,a%b);
#7  Lũy thừa nhị phân : nếu b==0 return 1; if(b chẵn) return (a,b/2)*2 -> return lcm(a,b/2)*lcm(a,b/2);
if lẻ a*(a^(b-1)/2)*2 -> return a*lcm(a,(b-1)/2)*lcm(a,(b-1)/2);
#8 tính tổng S(n) = 1/1 +1/2 + 1/3 +.. + 1/n  -> 1/n+tong(n-1); 
#9 Chuyển hệ thập phân sang hệ nhị phân : 
void nhi(int n){
  if(n>1) nhi(n/2); n = 8 -> 8,4,2 , vì 1 < 1 nên ra = 1 
  cout<<(n%2);  // 2%2=0 , 4%2==0 , 8%2==0 
}
int main(){
  int n; cin>>n;
  if(n==0) cout<<0;
  else nhi(n);
}
#10 Chuyển hệ thập phân sang hệ 16 : if n==0 return; 
void hex(ll n){
  if(n==0) return;
  hex(n/16); n=995 -> 995/16=62 -> 62/16=3 -> 3/16=0 
  int binx=(n%16); 3%16=3 -> 62%16=14  -> 995%16=3
  if(binx<10) cout<<binx; // 3%16=3 nên cout 3 , 995%16=3 nên cout 3 
  else cout<<char(binx-10+'A'); //14 nên bằng 69 -> E 
}
#11  Tính tổng chữ số sử dụng đệ quy : 
ll s(ll n){
  if(n==0) return 0;
  else {
    return n%10+s(n/10);
  }
}
#12 Đếm số lượng chữ số của N sử dụng đệ quy: 
ll s(ll n){
  if(n<10) return 1;    //123452>10 nó chuyển xuống return khi nào n<10 
  return 1+s(n/10);
}
#13 Tìm chữ số đầu tiên của số nguyên 
ll s(ll n){
  if(n<10) return n;
  else{
    return s(n/10);
  }
}
#14 Chữ số lớn nhất 
ll l(ll n){
  if(n<10) return n;
  return max(n%10,l(n/10));
}
#15 In ra số nguyên
void l(ll n){
  if(n<10) {
    cout<<n<<" ";
    return; }
  l(n/10);
  cout<<n%10<<" ";
}
void s(ll n){
  if(n<10) {
    cout<<n<<" ";
    return; }
  cout<<n%10<<" ";
  s(n/10);
}
