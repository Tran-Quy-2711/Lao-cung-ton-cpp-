1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35,38,39
Khi đếm số lượng ước của một số nguyên ta chỉ cần cộng thêm 1 vào mỗi số mũ trong phân tích thừa số nguyên tố rồi nhân lại.
khi can*can==n thì có các ước nó là lẻ còn can*can!=n thì có các ước là chẵn 
tìm ước thì nếu xét n%i==0 và i!=n/i 
#1 kiểm tra số nguyên tố :
bool ktra(int n){
  for(int i=2;i*i<=n;i++){
    if(n%i==0) return 0;
  }
  return n>1;
}
#2 số chính phương : 
bool cp(ll n){
  int cp=sqrt(n);
  return cp*cp==n;
}
#3 đếm ước : 
int demuoc(int n){
  int dem=0;
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      dem++;
      if(i!=n/i) dem++;
    }
  }
  return dem;
}
#4 phân tích thừa số nguyên tố :
ll thuant(ll n){
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      while(n%i==0){
        cout<<i<<" ";
        n/=i;       //15 ko chia hết cho 2 thì xét i=3 
      }
    }
  }
  if(n>1) return n;
}
#5 tổ chập k của n : n!/k!*(n-k)! -> gọi hàm gt 
#6 số hoàn hảo là số có các ước nhỏ hơn nó và có tổng bằng nó  -> nên đặt sum=1 vì 1 luôn có ước của nó 
vd : 28 -> 1 2 4 7 14 = 28 
bool hoanhao(int n){
  if(n<2) return false;
  int sum=1;
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      sum+=i;
      if(i!=n/i) sum+=n/i;
      cout<<i<<" "<<n/i<<" ";
    }
  }
  return sum==n;
}
#7 số thuận nghịch là số đối xứng //vd 1221 đọc ngược lại là 1221 
rev=rev*10+n%10;
#ước chung lớn nhất && bội chung nhỏ nhất
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;  // Lưu b vào biến tạm
        b = a % b;     // Cập nhật b = phần dư của a chia b
        a = temp;      // Gán giá trị cũ của b cho a
    }
    return a;  // Khi b == 0, a là GCD
}
int lcm(int a, int b) {
    return (a / gcd(a, b)) * b;  // Tránh tràn số
}
#8  In số lượng ước của n là số nguyên tố : 36=2^2+3^2  -> số lượng = 2 
int ham6(int n){
  int dem=0;
  for(int i=2;i*i<=n;i++){
   if(n%i==0){
     dem++;
     while(n%i==0){
       n/=i;
     }
   }
  }
  if(n>1) dem++;
  return dem;
}
không được if(ham2(n%8==0)) -> phải là if(ham2(n)%8==0) 
#9 Một số được coi là thuần nguyên tố nếu nó là số nguyên tố, tất cả các chữ số là nguyên tố và tổng chữ số của
nó cũng là một số nguyên tố. Bài toán đặt ra là đếm xem trong một đoạn giữa hai số nguyên cho trước có bao
nhiêu số thuần nguyên tố.
int thuannt(int n){
  int sum=0;
  while(n){
    int r=n%10;
    if(!ham1(r)) return 0;
    sum+=r;
    n/=10;
  }
  return ham1(sum);
}
int main(){
  int a,b; cin>>a>>b;
  int dem=0;
  for(int i=a;i<=b;i++){
    if(thuannt(i)&&ham1(i)) dem++;
  }
  cout<<dem;
}
#10 số fibonacci : f(n) = f(n-1) + f(n-2) 
F0 F1	F2 F3	F4 F5	F6 F7	F8 F9	F10	F11	F12	F13	F14	F15	F16 F17	 F18	F19
0	 1	1	 2	3	 5	8	 13	21 34	55	89	144	233	377	610	987	1597 2584 4181
ll fibo(ll n){
  if(n==0||n==1) return 1;
  ll f0=0,f1=1;
  while(true){
    ll fn=f0+f1;
    if(fn==n) return 1;
    if(fn>n) return 0;
    f0=f1;
    f1=fn;
  }
  return 0;
}
#11 Nhiệm vụ của bạn là in ra N số Fibonacci đầu tiên, một số đầu tiên trong dãy Fibonacci là 1, 1, 2, 3, 5, 8....
ll fibo(ll n){
  if(n>=1) cout<<1<<endl;   // vì nếu n==1 in 1 và kết thúc ko xét n==2 
  if(n>=2) cout<<1<<endl;
  ll f1=1,f2=1;
  for(int i=3;i<=n;i++){   
    ll fn=f1+f2;
    cout<<fn<<" "<<endl;
    f1=f2;
    f2=fn;
  }
}
Nhiệm vụ của bạn là hãy tìm số thuộc dãy số Fibonacci nhỏ nhất lớn hơn hoặc bằng số N đã cho. Biết một số
đầu tiên trong dãy Fibonacci là: 1, 1, 2, 3, 5, 8, 13....
ll fibo(ll n){
  ll f1=1,f2=1;
  ll fn=f1+f2;
  while(f2<n){
    fn=f1+f2;
    f1=f2;
    f2=fn;
  }
  return f2;
}
#12 Hãy liệt kê các cặp số nguyên tố cùng nhau và có giá trị khác nhau trong đoạn [a,b] theo thứ tự từ nhỏ đến lớn:  // ucll của 2 cặp a b là 1 
void goldbach(int a,int b){
  for(int i=a;i<b;i++){
    for(int j=i+1;j<=b;j++){
      if(__gcd(i,j)==1) cout<<"("<<i<<","<<j<<")"<<endl;
    }
  }
}
#13 Cho số tự nhiên N. Nhiệm vụ của bạn là in ra ước số nguyên tố nhỏ nhất của các số từ 1 đến N. Ước số nguyên
tố nhỏ nhất của 1 là 1. Ước số nguyên tố nhỏ nhất của các số chẫn là 2. Ước số nguyên tố nhỏ nhất của các số
nguyên tố là chính nó.
int ntnn(int n){
  if(n==1) return 1;
  if(n%2==0) return 2;
  for(int i=3;i*i<=n;i+=2){
    if(n%i==0) return i;
  }
  if(n>1) return n;
}
phân tích mũ thừa số nguyên tố
void phantich(int n){
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      int mu=0;
      while(n%i==0){
        ++mu;
        n/=i;
      }
      cout<<i<<"^"<<mu<<" * ";
    }
  }
  if(n>1) cout<<n<<"^1";
}
#14 số sphenic phải 3 thừa số nguyên tố khác nhau 
ll sphenic(int n){
  int dem=0;
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      int mu=0;
      while(n%i==0){
        mu++;
        n/=i;
      }
      if(mu>1) return false;
      dem++;
    }
  }
  if(n>1) dem++;
  return dem==3;
}
Cho số tự nhiên N. Nhiệm vụ của bạn là hãy kiểm tra N có phải là số Smith hay không. Một số được gọi là số
Smith nếu N không phải là số nguyên tố và có tổng các chữ số của N bằng tổng các chữ số của các thừa số
nguyên tố trong phân tích của N. Ví dụ N = 666 có các thừa số nguyên tố là 2, 3, 3, 37 có tổng các chữ số là 18.
=> tổng các chữ số thì mình lấy từng số rồi cộng 
int thuant(int n){
  if(ktra(n)) return 0;
  int sum=0;
  int tongcs=smith(n);
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      sum+=smith(i);
      while(n%i==0){
        n/=i;
      }
    }
  }
  if(n>1) sum+=smith(n);
  return tongcs==sum;
}
Một số được coi là số đẹp nếu nó là số thuận nghịch, có chứa ít nhất một chữ số 6, và tổng các chữ số của nó
có chữ số cuổi cùng là 8. Viết chương trình liệt kê các số đẹp trong đoạn giữa 2 số nguyên cho trước, các số
cách nhau một dấu cách. 
int tn(int n){
  bool check6=false;
  int rev=0;
  int tmp=n;
  int sum=0;
  while(n){
    rev=rev*10+n%10;
    sum+=n%10;
    if(n%10==6) check6=true;
    n/=10;
  }
  if(rev==tmp&&check6&&sum%10==8) return 1;
  return 0;
}
Viết chương trình cho phép nhập vào n và liệt kê các số nguyên tố thỏa mãn nhỏ hơn hoặc bằng n và có chữ
số cuối cùng lớn nhất. Có bao nhiêu số như vậy
int cn(int n){
  int r=n%10;
  while(n){
    if(n%10>r) return 0;
    n/=10;
  }
  return 1;
}
int main(){
  int n; cin>>n;
  int dem=0;
  for(int i=1;i<=n;i++){
    if(ktra(i)&&cn(i)) {
      cout<<i<<" ";
      dem++;
    }
  }
  cout<<endl<<dem;
}




















