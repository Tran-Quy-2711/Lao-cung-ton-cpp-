#1 kiểm tra số nguyên tố :
bool ktra(int n){
  for(int i=2;i*i<=n;i++){
    if(n%i==0) return 0;
  }
  return n>1;
}
#2 số chính phương : 
bool cp(ll n){
  int cp=sqrt(n);
  return cp*cp==n;
}
#3 đếm ước : 
int demuoc(int n){
  int dem=0;
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      dem++;
      if(i!=n/i) dem++;
    }
  }
  return dem;
}
#4 phân tích thừa số nguyên tố :
ll thuant(ll n){
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      while(n%i==0){
        cout<<i<<" ";
        n/=i;       //15 ko chia hết cho 2 thì xét i=3 
      }
    }
  }
  if(n>1) return n;
}
#5 tổ chập k của n : n!/k!*(n-k)! -> gọi hàm gt 
#6 số hoàn hảo là số có các ước nhỏ hơn nó và có tổng bằng nó  -> nên đặt sum=1 vì 1 luôn có ước của nó 
vd : 28 -> 1 2 4 7 14 = 28 
bool hoanhao(int n){
  if(n<2) return false;
  int sum=1;
  for(int i=2;i*i<=n;i++){
    if(n%i==0){
      sum+=i;
      if(i!=n/i) sum+=n/i;
      cout<<i<<" "<<n/i<<" ";
    }
  }
  return sum==n;
}
#7 số thuận nghịch là số đối xứng //vd 1221 đọc ngược lại là 1221 
rev=rev*10+n%10;
#ước chung lớn nhất && bội chung nhỏ nhất
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;  // Lưu b vào biến tạm
        b = a % b;     // Cập nhật b = phần dư của a chia b
        a = temp;      // Gán giá trị cũ của b cho a
    }
    return a;  // Khi b == 0, a là GCD
}
int lcm(int a, int b) {
    return (a / gcd(a, b)) * b;  // Tránh tràn số
}
#8  In số lượng ước của n là số nguyên tố : 36=2^2+3^2  -> số lượng = 2 
int ham6(int n){
  int dem=0;
  for(int i=2;i*i<=n;i++){
   if(n%i==0){
     dem++;
     while(n%i==0){
       n/=i;
     }
   }
  }
  if(n>1) dem++;
  return dem;
}
không được if(ham2(n%8==0)) -> phải là if(ham2(n)%8==0) 
#9 Một số được coi là thuần nguyên tố nếu nó là số nguyên tố, tất cả các chữ số là nguyên tố và tổng chữ số của
nó cũng là một số nguyên tố. Bài toán đặt ra là đếm xem trong một đoạn giữa hai số nguyên cho trước có bao
nhiêu số thuần nguyên tố.
int thuannt(int n){
  int sum=0;
  while(n){
    int r=n%10;
    if(!ham1(r)) return 0;
    sum+=r;
    n/=10;
  }
  return ham1(sum);
}
int main(){
  int a,b; cin>>a>>b;
  int dem=0;
  for(int i=a;i<=b;i++){
    if(thuannt(i)&&ham1(i)) dem++;
  }
  cout<<dem;
}
#10 số fibonacci : f(n) = f(n-1) + f(n-2) 
F0 F1	F2 F3	F4 F5	F6 F7	F8 F9	F10	F11	F12	F13	F14	F15	F16 F17	 F18	F19
0	 1	1	 2	3	 5	8	 13	21 34	55	89	144	233	377	610	987	1597 2584 4181

































